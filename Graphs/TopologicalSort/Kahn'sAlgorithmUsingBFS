In this logic, we make use of the inDegrees of the vertices and a queue.

Queue will always have those vertices which have indegrees as 0.

vector<int> topSortBFS(int V, vector<int> adj[])
        {
            int inDeg[V] = {0};
            for(int i = 0; i<V; i++)
            {
                for(auto it: adj[i])
                {
                    inDeg[it]++;
                }
            }
            queue<int> q;
            vector<int> ans;
            for(int i = 0; i<V; i++)
            {
                if(inDeg[i] == 0)
                    q.push(i);
            }
            
            while(!q.empty())
            {
                int node = q.front();
                q.pop();
                ans.push_back(node);
                
                for(auto it: adj[node])
                {
                    inDeg[it]--;
                    if(inDeg[it] == 0)
                        q.push(it);
                }
            }
            return ans;
        }
