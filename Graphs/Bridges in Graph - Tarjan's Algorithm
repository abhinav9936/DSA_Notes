tin[] - time of insertion 
low[] - lowest time insertion of all adjacent nodes apart from parent

https://leetcode.com/problems/critical-connections-in-a-network/submissions/1113820674/

class Solution {
private:
    int timer = 1;
private:
    void dfs(int node, int parent, vector<int> adj[], vector<int>& vis, vector<int>& tin, vector<int>& low,
            vector<vector<int>>& bridges)
    {
        vis[node] = 1;
        tin[node] = low[node] = timer;
        timer++;

        for(auto it: adj[node])
        {
            if(it == parent) continue;
            if(vis[it] == 0)
            {
                dfs(it, node, adj, vis, tin, low, bridges);
                low[node] = min(low[node], low[it]);
                if(low[it] > tin[node] )
                {
                    bridges.push_back({it, node});
                }
            }
            else
            {
                low[node] = min(low[node], low[it]);
            }
        }
    }
public:
    vector<vector<int>> criticalConnections(int n, vector<vector<int>>& connections) {
        vector<int> graph[n];
        for(auto it: connections)
        {
            graph[it[0]].push_back(it[1]);
            graph[it[1]].push_back(it[0]);
        }
        vector<int> vis(n, 0);
        vector<int> tin(n);
        vector<int> low(n);
        vector<vector<int>> bridges;
        dfs(0, -1, graph, vis, tin, low, bridges);
        return bridges;
    }
};
