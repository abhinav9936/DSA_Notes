Based on Disjoint Sets Algorithm

1) Sort the edges according to the weights
2) Start choosing the edges and do unionByRank if parent are not same
    Also add these edges to created the MST sum

class Solution
{
	public:
	//Function to find sum of weights of edges of the Minimum Spanning Tree.
    int spanningTree(int V, vector<vector<int>> adj[])
    {
        vector<pair<int, pair<int, int>>> edges;
				for(int i = 0; i<V; i++){
					for(auto it: adj[i])
					{
						int adjNode = it[0]; int wt = it[1]; int node = i;
						edges.push_back({wt, {node, adjNode}};
					}
				}
				DisjointSet ds(V);
				sort(edges.begin(), edges.end());
				int mst = 0;
				for(auto it: edges)
				{
					int wt = it.first; int u = it.second.first; int v = it.second.second;
					if(ds.findParent(u) != ds.findParent(v))
					{
						mst += wt;
						ds.unionByRank(u, v);
					}
				}
				return mst;
    }
};

