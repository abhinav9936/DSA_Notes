Single Source Algorithm
It solves the Dijkstra limitation of negative edges and also it helps in checking negative cycles.
Main intution behind this algorithm - 

1) Initialized a distance array with infinite values except source
2) Iterate over all the edges (u,v, wt) and do the below
  if(dist[u] != infinity and dist[u] + wt < dist[v])
    update the dist[v] = dist[u] + wt
3) Repeat step 2 for V-1 times ( V being vertices)

Detailed Code -
class Solution {
  public:
    /*  Function to implement Bellman Ford
    *   edges: vector of vectors which represents the graph
    *   S: source vertex to start traversing graph with
    *   V: number of vertices
    */
    vector<int> bellman_ford(int V, vector<vector<int>>& edges, int S) {
        // Code here
        vector<int> dist(V, 1e8);
        dist[S] = 0;
        for(int i = 0; i<V-1; i++)
        {
            for(auto it: edges)
            {
                int u = it[0];
                int v = it[1];
                int wt = it[2];
                if(dist[u] != 1e8 && dist[u] + wt < dist[v])
                {
                    dist[v] = dist[u] + wt;
                }
            }
        }
        for(auto it: edges)
        {
            int u = it[0];
            int v = it[1];
            int wt = it[2];
            if(dist[u] != 1e8 && dist[u] + wt < dist[v])
            {
                return {-1};
            }
        }
        return dist;
        
    }
};
