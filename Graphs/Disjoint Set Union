Points
1) Time Complexity is 4 * alpha
Read about alpha

#include <bits/stdc++.h>
#include <iostream>

using namespace std;
class DisjointSet
{
  vector<int> rank, parent;

public:
  DisjointSet(int n)
  {
    rank.resize(n+1, 0);
    parent.resize(n+1);
    for(int i = 0; i<n; i++)
      parent[i] = i;
  }

  int findParent(int node)
  {
    if(node == parent[node])
      return node;
    return parent[node] = findParent(parent[node]);
  }

  void unionByRank(int u, int v)
  {
    int parentU = findParent(u);
    int parentV = findParent(v);  
    if(parentU == parentV) return;

    if(rank[parentU] == rank[parentV])
    {
			parent[parentU] = parentV;
			rank[parentV]++;
    }
		else if(rank[parentU] < rank[parentV])
		{
			parent[parentU] = parentV;
		}
		else
			parent[parentV] = parentU;
  }
};

Striever Code

class DisjointSet {
    vector<int> rank, parent, size;
public:
    DisjointSet(int n) {
        rank.resize(n + 1, 0);
        parent.resize(n + 1);
        size.resize(n + 1);
        for (int i = 0; i <= n; i++) {
            parent[i] = i;
            size[i] = 1;
        }
    }

    int findUPar(int node) {
        if (node == parent[node])
            return node;
        return parent[node] = findUPar(parent[node]);
    }

    void unionByRank(int u, int v) {
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if (ulp_u == ulp_v) return;
        if (rank[ulp_u] < rank[ulp_v]) {
            parent[ulp_u] = ulp_v;
        }
        else if (rank[ulp_v] < rank[ulp_u]) {
            parent[ulp_v] = ulp_u;
        }
        else {
            parent[ulp_v] = ulp_u;
            rank[ulp_u]++;
        }
    }

    void unionBySize(int u, int v) {
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if (ulp_u == ulp_v) return;
        if (size[ulp_u] < size[ulp_v]) {
            parent[ulp_u] = ulp_v;
            size[ulp_v] += size[ulp_u];
        }
        else {
            parent[ulp_v] = ulp_u;
            size[ulp_u] += size[ulp_v];
        }
    }
};
