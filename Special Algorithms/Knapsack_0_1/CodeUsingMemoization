#include <bits/stdc++.h> 
int ks(int idx, int W, vector<int>& wt, vector<int>& val, vector<vector<int>>& dp)
{
	if(idx == 0)
	{
		if(wt[0]<=W) return val[0];
		return 0;
	}
	if(dp[idx][W] != -1) return dp[idx][W];
	int notPick = ks(idx-1, W, wt, val, dp);
	int pick = 0;
	if(wt[idx]<=W)
		pick = val[idx] + ks(idx-1, W-wt[idx], wt, val, dp);
	return dp[idx][W] = max(pick, notPick);
}
int knapsack(vector<int> weight, vector<int> value, int n, int maxWeight) 
{
	// Write your code here
	vector<vector<int>> dp(n, vector<int>(maxWeight + 1, -1));
	return ks(n-1, maxWeight, weight, value, dp);
}
