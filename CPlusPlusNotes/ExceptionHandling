class MyException : public exception { 
private: 
    string message; 
  
public: 
    // Constructor accepts a const char* that is used to set 
    // the exception message 
    MyException(const char* msg) 
    { 
        message = msg;
    } 
  
    // Override the what() method to return our message 
    const char* what() const throw() 
    { 
        return message.c_str(); 
    } 
}; 

class MinStack {
public:
    stack<pair<int, int>> st;
    MinStack() {

    }
    
    void push(int val) {
        if(st.empty())
            st.push({val, val});
        else
        {
            int mini = min(val, st.top().second);
            st.push({val, mini});
        }
    }
    
    void pop() {
        try
        {
            if(st.empty())
                throw MyException("Stack is Empty");
            st.pop();
        }
        catch (MyException& e)
        {
            cout << e.what() << endl;
        }
    }
    
    int top() {
        return st.top().first;
    }
    
    int getMin() {
        return st.top().second;
    }
};

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack* obj = new MinStack();
 * obj->push(val);
 * obj->pop();
 * int param_3 = obj->top();
 * int param_4 = obj->getMin();
 */

int main()
{
    MinStack ms;
    ms.pop();
    return 0;
}
